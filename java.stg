// dictionaries: allows simple translations

booleanValue ::= [
    "true"  : "true",
    "false" : "false",
    default : "null"
]

typeValue ::= [
    "integer"  : "int",
    "float"    : "double",
    "boolean"  : "boolean",
    "String"   : "String",
    default    : "null"
]

typeFormat ::= [
    "integer"  : "",
    "float"    : "",
    "boolean"  : "",
    "String"   : "",
    default    : "null"
]

operators ::= [
    "*"  : "*",
    "/"  : "/",
    "+"  : "+",
    "-"  : "-",
    "==" : "==",
    "!=" : "!=",
    "<"  : "<",
    ">"  : ">",
    "<=" : "<=",
    ">=" : ">=",
    "!" : "!",
    "||" : "||",
    "&&" : "&&",
    default    : "null"
]

powerTypeCast ::= [
    "integer" : "(int)",
    "float" : "(double)",
    default : "null"
]

// templates:

module(name,stat) ::= <<
import java.util.Scanner;
public class <name> {  
    public static void main(String[] args){
        <stats(stat)>
    }
}
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

assign(stat,var,value) ::= <<
<stats(stat)>
<var> = <value>;
>>

init(value) ::= "<if(value)> = <value><endif>"
declaration(type,var,value) ::= "<typeValue.(type)> <var><init(value)>;"


//Print expression
initUnit(unit) ::= "<if(unit)> + \"<unit>\"<endif>" //Check if there's a unit
print(stat,expr,unit) ::= <<
<stats(stat)>
System.out.println(<expr><initUnit(unit)>);
>>

input(stat, prompt, type, var, unit) ::= <<
<stats(stat)>
System.out.print(<prompt> + "<if(unit)> unit:\"<unit>\"<endif>");
<typeValue.(type)> <var> = userInput.nextLine();
>>

//Expression 
expression(type,var,e1,op,e2) ::= "<declaration(type,var,[e1,\" \",operators.(op),\" \",e2])>"

expressionNot(type,var,e1) ::= "<declaration(type,var,[\"!\",e1])>"

powerExpr(type,var,e1,e2) ::= "<declaration(type,var,[powerTypeCast.(type),\"Math.pow(\", e1, \", \", e2, \")\"])>"

unaryOperator(type,var,e1,operator) ::= "<typeValue.(type)> <var><if(e1)> = <operator>(<e1>)<endif>;"

conditional(stat,var,ifStats, elseStats) ::= <<
<stats(stat)>
if (<var>) {
   <ifStats>
}<if(elseStats)>
else {
   <elseStats>
}<endif>
>>

whileLoop(stat,var,checkCondition,trueStats) ::= <<
<stats(stat)>
while (<var>) {
    <trueStats>
    <checkCondition> 
}
>>

forLoop(stat,var,cond,updateCond,updateIncr,inc,statList) ::= <<
<stats(stat)>
for(<var><cond>;<inc>){
    <updateCond> 
    if(!<cond>){
        break;
    }

    <statList>

    <updateIncr> 
}
>>